/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as PrivateRouteRouteImport } from './routes/_private/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PrivateDashboardRouteRouteImport } from './routes/_private/dashboard/route'
import { Route as PublicauthResetPasswordRouteRouteImport } from './routes/_public/(auth)/reset-password/route'
import { Route as PublicauthRegisterRouteRouteImport } from './routes/_public/(auth)/register/route'
import { Route as PublicauthLoginRouteRouteImport } from './routes/_public/(auth)/login/route'
import { Route as PublicauthForgotPasswordRouteRouteImport } from './routes/_public/(auth)/forgot-password/route'

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRouteRoute = PrivateRouteRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateDashboardRouteRoute = PrivateDashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const PublicauthResetPasswordRouteRoute =
  PublicauthResetPasswordRouteRouteImport.update({
    id: '/(auth)/reset-password',
    path: '/reset-password',
    getParentRoute: () => PublicRouteRoute,
  } as any)
const PublicauthRegisterRouteRoute = PublicauthRegisterRouteRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicauthLoginRouteRoute = PublicauthLoginRouteRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicauthForgotPasswordRouteRoute =
  PublicauthForgotPasswordRouteRouteImport.update({
    id: '/(auth)/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => PublicRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof PrivateDashboardRouteRoute
  '/forgot-password': typeof PublicauthForgotPasswordRouteRoute
  '/login': typeof PublicauthLoginRouteRoute
  '/register': typeof PublicauthRegisterRouteRoute
  '/reset-password': typeof PublicauthResetPasswordRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof PrivateDashboardRouteRoute
  '/forgot-password': typeof PublicauthForgotPasswordRouteRoute
  '/login': typeof PublicauthLoginRouteRoute
  '/register': typeof PublicauthRegisterRouteRoute
  '/reset-password': typeof PublicauthResetPasswordRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_private': typeof PrivateRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_private/dashboard': typeof PrivateDashboardRouteRoute
  '/_public/(auth)/forgot-password': typeof PublicauthForgotPasswordRouteRoute
  '/_public/(auth)/login': typeof PublicauthLoginRouteRoute
  '/_public/(auth)/register': typeof PublicauthRegisterRouteRoute
  '/_public/(auth)/reset-password': typeof PublicauthResetPasswordRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
  id:
    | '__root__'
    | '/'
    | '/_private'
    | '/_public'
    | '/_private/dashboard'
    | '/_public/(auth)/forgot-password'
    | '/_public/(auth)/login'
    | '/_public/(auth)/register'
    | '/_public/(auth)/reset-password'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/dashboard': {
      id: '/_private/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof PrivateDashboardRouteRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_public/(auth)/reset-password': {
      id: '/_public/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof PublicauthResetPasswordRouteRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/(auth)/register': {
      id: '/_public/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicauthRegisterRouteRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/(auth)/login': {
      id: '/_public/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicauthLoginRouteRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/(auth)/forgot-password': {
      id: '/_public/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof PublicauthForgotPasswordRouteRouteImport
      parentRoute: typeof PublicRouteRoute
    }
  }
}

interface PrivateRouteRouteChildren {
  PrivateDashboardRouteRoute: typeof PrivateDashboardRouteRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateDashboardRouteRoute: PrivateDashboardRouteRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicauthForgotPasswordRouteRoute: typeof PublicauthForgotPasswordRouteRoute
  PublicauthLoginRouteRoute: typeof PublicauthLoginRouteRoute
  PublicauthRegisterRouteRoute: typeof PublicauthRegisterRouteRoute
  PublicauthResetPasswordRouteRoute: typeof PublicauthResetPasswordRouteRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicauthForgotPasswordRouteRoute: PublicauthForgotPasswordRouteRoute,
  PublicauthLoginRouteRoute: PublicauthLoginRouteRoute,
  PublicauthRegisterRouteRoute: PublicauthRegisterRouteRoute,
  PublicauthResetPasswordRouteRoute: PublicauthResetPasswordRouteRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
