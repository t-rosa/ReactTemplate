/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PrivateRouteRouteImport } from './routes/_private/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PrivateDashboardRouteRouteImport } from './routes/_private/dashboard/route'
import { Route as MarketingHomeRouteRouteImport } from './routes/_marketing/home/route'
import { Route as AuthResetPasswordRouteRouteImport } from './routes/_auth/reset-password/route'
import { Route as AuthRegisterRouteRouteImport } from './routes/_auth/register/route'
import { Route as AuthLoginRouteRouteImport } from './routes/_auth/login/route'
import { Route as AuthForgotPasswordRouteRouteImport } from './routes/_auth/forgot-password/route'

const PrivateRouteRoute = PrivateRouteRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateDashboardRouteRoute = PrivateDashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const MarketingHomeRouteRoute = MarketingHomeRouteRouteImport.update({
  id: '/_marketing/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthResetPasswordRouteRoute = AuthResetPasswordRouteRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthRegisterRouteRoute = AuthRegisterRouteRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRouteRoute = AuthLoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthForgotPasswordRouteRoute = AuthForgotPasswordRouteRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forgot-password': typeof AuthForgotPasswordRouteRoute
  '/login': typeof AuthLoginRouteRoute
  '/register': typeof AuthRegisterRouteRoute
  '/reset-password': typeof AuthResetPasswordRouteRoute
  '/home': typeof MarketingHomeRouteRoute
  '/dashboard': typeof PrivateDashboardRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof AuthForgotPasswordRouteRoute
  '/login': typeof AuthLoginRouteRoute
  '/register': typeof AuthRegisterRouteRoute
  '/reset-password': typeof AuthResetPasswordRouteRoute
  '/home': typeof MarketingHomeRouteRoute
  '/dashboard': typeof PrivateDashboardRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_private': typeof PrivateRouteRouteWithChildren
  '/_auth/forgot-password': typeof AuthForgotPasswordRouteRoute
  '/_auth/login': typeof AuthLoginRouteRoute
  '/_auth/register': typeof AuthRegisterRouteRoute
  '/_auth/reset-password': typeof AuthResetPasswordRouteRoute
  '/_marketing/home': typeof MarketingHomeRouteRoute
  '/_private/dashboard': typeof PrivateDashboardRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/home'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/home'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_private'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/register'
    | '/_auth/reset-password'
    | '/_marketing/home'
    | '/_private/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  MarketingHomeRouteRoute: typeof MarketingHomeRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/dashboard': {
      id: '/_private/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof PrivateDashboardRouteRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_marketing/home': {
      id: '/_marketing/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof MarketingHomeRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/reset-password': {
      id: '/_auth/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthForgotPasswordRouteRoute: typeof AuthForgotPasswordRouteRoute
  AuthLoginRouteRoute: typeof AuthLoginRouteRoute
  AuthRegisterRouteRoute: typeof AuthRegisterRouteRoute
  AuthResetPasswordRouteRoute: typeof AuthResetPasswordRouteRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthForgotPasswordRouteRoute: AuthForgotPasswordRouteRoute,
  AuthLoginRouteRoute: AuthLoginRouteRoute,
  AuthRegisterRouteRoute: AuthRegisterRouteRoute,
  AuthResetPasswordRouteRoute: AuthResetPasswordRouteRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface PrivateRouteRouteChildren {
  PrivateDashboardRouteRoute: typeof PrivateDashboardRouteRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateDashboardRouteRoute: PrivateDashboardRouteRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  MarketingHomeRouteRoute: MarketingHomeRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
